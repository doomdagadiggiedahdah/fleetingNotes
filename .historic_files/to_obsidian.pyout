#!/usr/bin/env python3

import os
import shutil
from pathlib import Path
from datetime import datetime, timedelta

# Directories for transcription, archive, and other operations
TRANSCRIPTION_DIR = "/home/mat/Documents/ProgramExperiments/fleetingNotes/transcriptions/"
ARCHIVE_DIR       = "/home/mat/Documents/ProgramExperiments/fleetingNotes/transcriptions/.archive"
ZETTLE_DIR        = "/home/mat/Obsidian/ZettleKasten"
INBOX_NOTE        = "/home/mat/Obsidian/gtd - inbox.md"
DAILY_NOTES_DIR   = "/home/mat/Obsidian/Daily Notes"
LOG_FILE          = os.path.join(ZETTLE_DIR, "dump_log.md")
LONG_NOTES_DIR    = os.path.join(ZETTLE_DIR, "fleet_notes", "voice_memo")

# Keyword mappings for notes processing
NOTES_MAP = {
    "concept digest": os.path.join(ZETTLE_DIR, "concept digest.md"),
    "memory dump": os.path.join(ZETTLE_DIR, "memory dump.md"),
    "daily reflection": "daily"
}

# Logging function to track operations
def log_operation(content, source, target):
    with open(LOG_FILE, "a") as log_file:
        log_file.write(f"- Source: '{source}'\n")
        log_file.write(f"- Target: '{target}'\n")
        log_file.write(f"- Content: '{content}'\n\n")

# Function to append content to the appropriate file
def append_to_file(content, source_file, target_file):
    print(f"Appending content to {target_file}")
    char_count = len(content)
    spacer = "\n"
    
    # Append a spacer first
    with open(target_file, "a") as tf:
        tf.write(spacer)
    
    # If content is longer than 200 characters, write to a new file in the LONG_NOTES_DIR
    if char_count > 200:
        md_filename = Path(source_file).stem + ".md"
        os.makedirs(LONG_NOTES_DIR, exist_ok=True)
        
        # Write the full content to a new file for long notes
        with open(os.path.join(LONG_NOTES_DIR, md_filename), "w") as lf:
            lf.write(content)
        
        preview = content[:200]
        formatted_entry = f"- [[{md_filename}]] ----VM----<br>{preview}..."
        with open(target_file, "a") as tf:
            tf.write(formatted_entry + "\n")
        
        log_operation(preview, source_file, target_file)
    else:
        formatted_entry = f"- {Path(source_file).stem} ----VM----<br>{content}"
        with open(target_file, "a") as tf:
            tf.write(formatted_entry + "\n")
        
        log_operation(content, source_file, target_file)

# Function to handle daily reflections based on filename
def handle_daily_reflection(content, source_file):
    filename = Path(source_file).stem
    try:
        datetime_obj = datetime.strptime(filename, "%Y-%m-%d %H-%M-%S %M")
    except ValueError:
        print(f"Filename {source_file} does not match expected format.")
        return
    
    date = datetime_obj.date()
    hour = datetime_obj.hour

    # Adjust date if the file was created between midnight and 5 AM
    if hour < 5:
        date -= timedelta(days=1)
    
    target_file = os.path.join(DAILY_NOTES_DIR, f"{date}.md")
    os.makedirs(os.path.dirname(target_file), exist_ok=True)
    
    # Remove the "daily reflection" keyword and append the content
    extracted = content.replace("daily reflection", "").strip()
    append_to_file(extracted, source_file, target_file)

# Main function to handle transcriptions
def handle_keywords(content, source_file):
    # Check for keyword matches and handle accordingly
    for keyword, target in NOTES_MAP.items():
        if keyword.lower() in content.lower():
            print(f"Keyword '{keyword}' found in content.")
            extracted = content.lower().replace(keyword.lower(), "").strip()
            
            # Handle the "daily reflection" case separately
            if target == "daily":
                print(f"Handling daily reflection for {source_file}")
                handle_daily_reflection(extracted, source_file)
            else:
                print(f"Appending to file: {target}")
                append_to_file(extracted, source_file, target)
            return True
    
    # If no keyword matched, append the content to the inbox note
    print(f"No keyword matched for file {source_file}, appending to INBOX_NOTE.")
    append_to_file(content, source_file, INBOX_NOTE)
    return False

def main():
    os.makedirs(ARCHIVE_DIR, exist_ok=True)

    # Retrieve all transcription files with a .txt extension
    os.chdir(TRANSCRIPTION_DIR)
    transcription_files = [f for f in os.listdir(TRANSCRIPTION_DIR) if f.endswith(".txt")]
    print(transcription_files)
    print(os.getcwd())
    print(os.listdir())
    
    for source_file in transcription_files:
        full_path = os.path.join(TRANSCRIPTION_DIR, source_file)
        
        # Skip if it's not a valid file
        if not os.path.isfile(full_path):
            continue
        
        # Read the content of the transcription file
        with open(full_path, "r") as sf:
            content = sf.read()

        # Process the transcription file based on keywords
        if not handle_keywords(content, source_file):
            print(f"Content added to inbox note: {source_file}")

        # Move the file to the archive after processing (uncomment to activate)
        # shutil.move(full_path, ARCHIVE_DIR)

if __name__ == "__main__":
    main()
